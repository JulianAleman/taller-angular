{"version":3,"sources":["node_modules/@angular-devkit/build-angular/src/builders/web-test-runner/jasmine_runner.js","../../packages/platform-browser-dynamic/src/compiler_factory.ts","../../packages/platform-browser-dynamic/src/platform_core_dynamic.ts","../../packages/platform-browser-dynamic/src/resource_loader/resource_loader_impl.ts","../../packages/platform-browser-dynamic/src/platform_providers.ts","../../packages/platform-browser-dynamic/src/resource_loader/resource_loader_cache.ts","../../packages/platform-browser-dynamic/src/version.ts","../../packages/platform-browser-dynamic/src/platform-browser-dynamic.ts","../../packages/platform-browser-dynamic/public_api.ts","../../packages/platform-browser-dynamic/index.ts","../../packages/platform-browser-dynamic/platform-browser-dynamic.ts","../../packages/platform-browser/testing/src/browser.ts","../../packages/platform-browser/testing/src/testing.ts","../../packages/platform-browser/testing/public_api.ts","../../packages/platform-browser/testing/index.ts","../../packages/platform-browser/testing/testing.ts","../../packages/platform-browser-dynamic/testing/src/dom_test_component_renderer.ts","../../packages/platform-browser-dynamic/testing/src/platform_core_dynamic_testing.ts","../../packages/platform-browser-dynamic/testing/src/testing.ts","../../packages/platform-browser-dynamic/testing/public_api.ts","../../packages/platform-browser-dynamic/testing/index.ts","../../packages/platform-browser-dynamic/testing/testing.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { getTestBed } from '@angular/core/testing';\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting,\n} from '@angular/platform-browser-dynamic/testing';\nimport {\n  getConfig,\n  sessionFailed,\n  sessionFinished,\n  sessionStarted,\n} from '@web/test-runner-core/browser/session.js';\n\n/** Executes Angular Jasmine tests in the given environment and reports the results to Web Test Runner. */\nexport async function runJasmineTests(jasmineEnv) {\n  const allSpecs = [];\n  const failedSpecs = [];\n\n  jasmineEnv.addReporter({\n    specDone(result) {\n      const expectations = [...result.passedExpectations, ...result.failedExpectations];\n      allSpecs.push(...expectations.map((e) => ({ name: e.fullName, passed: e.passed })));\n\n      for (const e of result.failedExpectations) {\n        const message = `${result.fullName}\\n${e.message}\\n${e.stack}`;\n        // eslint-disable-next-line no-console\n        console.error(message);\n        failedSpecs.push({\n          message,\n          name: e.fullName,\n          stack: e.stack,\n          expected: e.expected,\n          actual: e.actual,\n        });\n      }\n    },\n\n    async jasmineDone(result) {\n      // eslint-disable-next-line no-console\n      console.log(`Tests ${result.overallStatus}!`);\n      await sessionFinished({\n        passed: result.overallStatus === 'passed',\n        errors: failedSpecs,\n        testResults: {\n          name: '',\n          suites: [],\n          tests: allSpecs,\n        },\n      });\n    },\n  });\n\n  await sessionStarted();\n\n  // Web Test Runner uses a different HTML page for every test, so we only get one `testFile` for the single `*.js` file we need to execute.\n  const { testFile, testFrameworkConfig } = await getConfig();\n  const config = { defaultTimeoutInterval: 60_000, ...(testFrameworkConfig ?? {}) };\n\n  // eslint-disable-next-line no-undef\n  jasmine.DEFAULT_TIMEOUT_INTERVAL = config.defaultTimeoutInterval;\n\n  // Initialize `TestBed` automatically for users. This assumes we already evaluated `zone.js/testing`.\n  getTestBed().initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting(), {\n    errorOnUnknownElements: true,\n    errorOnUnknownProperties: true,\n  });\n\n  // Load the test file and evaluate it.\n  try {\n    // eslint-disable-next-line no-undef\n    await import(new URL(testFile, document.baseURI).href);\n\n    // Execute the test functions.\n    // eslint-disable-next-line no-undef\n    jasmineEnv.execute();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err);\n    await sessionFailed(err);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompilerConfig} from '@angular/compiler';\nimport {Compiler, CompilerFactory, CompilerOptions, Injector, StaticProvider, ViewEncapsulation} from '@angular/core';\n\nexport const COMPILER_PROVIDERS =\n    <StaticProvider[]>[{provide: Compiler, useFactory: () => new Compiler()}];\n/**\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\nexport class JitCompilerFactory implements CompilerFactory {\n  private _defaultOptions: CompilerOptions[];\n\n  /** @internal */\n  constructor(defaultOptions: CompilerOptions[]) {\n    const compilerOptions: CompilerOptions = {\n      defaultEncapsulation: ViewEncapsulation.Emulated,\n    };\n\n    this._defaultOptions = [compilerOptions, ...defaultOptions];\n  }\n\n  createCompiler(options: CompilerOptions[] = []): Compiler {\n    const opts = _mergeOptions(this._defaultOptions.concat(options));\n    const injector = Injector.create({\n      providers: [\n        COMPILER_PROVIDERS, {\n          provide: CompilerConfig,\n          useFactory: () => {\n            return new CompilerConfig({\n              defaultEncapsulation: opts.defaultEncapsulation,\n              preserveWhitespaces: opts.preserveWhitespaces,\n            });\n          },\n          deps: []\n        },\n        opts.providers!\n      ]\n    });\n    return injector.get(Compiler);\n  }\n}\n\nfunction _mergeOptions(optionsArr: CompilerOptions[]): CompilerOptions {\n  return {\n    defaultEncapsulation: _lastDefined(optionsArr.map(options => options.defaultEncapsulation)),\n    providers: _mergeArrays(optionsArr.map(options => options.providers!)),\n    preserveWhitespaces: _lastDefined(optionsArr.map(options => options.preserveWhitespaces)),\n  };\n}\n\nfunction _lastDefined<T>(args: T[]): T|undefined {\n  for (let i = args.length - 1; i >= 0; i--) {\n    if (args[i] !== undefined) {\n      return args[i];\n    }\n  }\n  return undefined;\n}\n\nfunction _mergeArrays(parts: any[][]): any[] {\n  const result: any[] = [];\n  parts.forEach((part) => part && result.push(...part));\n  return result;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {COMPILER_OPTIONS, CompilerFactory, createPlatformFactory, platformCore} from '@angular/core';\n\nimport {JitCompilerFactory} from './compiler_factory';\n\n/**\n * A platform that included corePlatform and the compiler.\n *\n * @publicApi\n */\nexport const platformCoreDynamic = createPlatformFactory(platformCore, 'coreDynamic', [\n  {provide: COMPILER_OPTIONS, useValue: {}, multi: true},\n  {provide: CompilerFactory, useClass: JitCompilerFactory, deps: [COMPILER_OPTIONS]},\n]);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ResourceLoader} from '@angular/compiler';\nimport {Injectable} from '@angular/core';\n\n\n@Injectable()\nexport class ResourceLoaderImpl extends ResourceLoader {\n  override get(url: string): Promise<string> {\n    let resolve: (result: any) => void;\n    let reject: (error: any) => void;\n    const promise = new Promise<string>((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'text';\n\n    xhr.onload = function() {\n      const response = xhr.response;\n\n      let status = xhr.status;\n\n      // fix status code when it is 0 (0 status is undocumented).\n      // Occurs when accessing file resources or on Android 4.1 stock browser\n      // while retrieving files from application cache.\n      if (status === 0) {\n        status = response ? 200 : 0;\n      }\n\n      if (200 <= status && status <= 300) {\n        resolve(response);\n      } else {\n        reject(`Failed to load ${url}`);\n      }\n    };\n\n    xhr.onerror = function() {\n      reject(`Failed to load ${url}`);\n    };\n\n    xhr.send();\n    return promise;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID} from '@angular/common';\nimport {ResourceLoader} from '@angular/compiler';\nimport {COMPILER_OPTIONS, PLATFORM_ID, StaticProvider} from '@angular/core';\n\nimport {ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS as INTERNAL_BROWSER_PLATFORM_PROVIDERS} from '@angular/platform-browser';\n\nimport {ResourceLoaderImpl} from './resource_loader/resource_loader_impl';\n\n/**\n * @publicApi\n */\nexport const INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: StaticProvider[] = [\n  INTERNAL_BROWSER_PLATFORM_PROVIDERS,\n  {\n    provide: COMPILER_OPTIONS,\n    useValue: {providers: [{provide: ResourceLoader, useClass: ResourceLoaderImpl, deps: []}]},\n    multi: true\n  },\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ResourceLoader} from '@angular/compiler';\nimport {ɵglobal as global} from '@angular/core';\n\n/**\n * An implementation of ResourceLoader that uses a template cache to avoid doing an actual\n * ResourceLoader.\n *\n * The template cache needs to be built and loaded into window.$templateCache\n * via a separate mechanism.\n *\n * @publicApi\n *\n * @deprecated This was previously necessary in some cases to test AOT-compiled components with View\n *     Engine, but is no longer since Ivy.\n */\nexport class CachedResourceLoader extends ResourceLoader {\n  private _cache: {[url: string]: string};\n\n  constructor() {\n    super();\n    this._cache = (<any>global).$templateCache;\n    if (this._cache == null) {\n      throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');\n    }\n  }\n\n  override get(url: string): Promise<string> {\n    if (this._cache.hasOwnProperty(url)) {\n      return Promise.resolve(this._cache[url]);\n    } else {\n      return <Promise<any>>Promise.reject(\n          'CachedResourceLoader: Did not find cached template for ' + url);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser-dynamic package.\n */\n\nimport {Version} from '@angular/core';\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('17.3.12');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ResourceLoader} from '@angular/compiler';\nimport {createPlatformFactory, Provider} from '@angular/core';\n\nimport {platformCoreDynamic} from './platform_core_dynamic';\nimport {INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS} from './platform_providers';\nimport {CachedResourceLoader} from './resource_loader/resource_loader_cache';\n\nexport * from './private_export';\nexport {VERSION} from './version';\nexport {JitCompilerFactory} from './compiler_factory';\n\n/**\n * @publicApi\n *\n * @deprecated This was previously necessary in some cases to test AOT-compiled components with View\n *     Engine, but is no longer since Ivy.\n\n */\nexport const RESOURCE_CACHE_PROVIDER: Provider[] =\n    [{provide: ResourceLoader, useClass: CachedResourceLoader, deps: []}];\n\n/**\n * @publicApi\n */\nexport const platformBrowserDynamic = createPlatformFactory(\n    platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/platform-browser-dynamic';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformLocation} from '@angular/common';\nimport {MockPlatformLocation} from '@angular/common/testing';\nimport {APP_ID, createPlatformFactory, NgModule, PLATFORM_INITIALIZER, platformCore, provideZoneChangeDetection, StaticProvider} from '@angular/core';\nimport {BrowserModule, ɵBrowserDomAdapter as BrowserDomAdapter} from '@angular/platform-browser';\n\nfunction initBrowserTests() {\n  BrowserDomAdapter.makeCurrent();\n}\n\nconst _TEST_BROWSER_PLATFORM_PROVIDERS: StaticProvider[] =\n    [{provide: PLATFORM_INITIALIZER, useValue: initBrowserTests, multi: true}];\n\n/**\n * Platform for testing\n *\n * @publicApi\n */\nexport const platformBrowserTesting =\n    createPlatformFactory(platformCore, 'browserTesting', _TEST_BROWSER_PLATFORM_PROVIDERS);\n\n/**\n * NgModule for testing.\n *\n * @publicApi\n */\n@NgModule({\n  exports: [BrowserModule],\n  providers: [\n    {provide: APP_ID, useValue: 'a'},\n    provideZoneChangeDetection(),\n    {provide: PlatformLocation, useClass: MockPlatformLocation},\n  ]\n})\nexport class BrowserTestingModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser/testing package.\n */\nexport * from './browser';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/// <reference types=\"jasmine\" />\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {TestComponentRenderer} from '@angular/core/testing';\n\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\n@Injectable()\nexport class DOMTestComponentRenderer extends TestComponentRenderer {\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n  }\n\n  override insertRootElement(rootElId: string) {\n    this.removeAllRootElements();\n    const rootElement = getDOM().getDefaultDocument().createElement('div');\n    rootElement.setAttribute('id', rootElId);\n    this._doc.body.appendChild(rootElement);\n  }\n\n  override removeAllRootElements() {\n    // TODO(juliemr): can/should this be optional?\n    const oldRoots = this._doc.querySelectorAll('[id^=root]');\n    for (let i = 0; i < oldRoots.length; i++) {\n      getDOM().remove(oldRoots[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {createPlatformFactory, PlatformRef} from '@angular/core';\nimport {ɵplatformCoreDynamic as platformCoreDynamic} from '@angular/platform-browser-dynamic';\n\n/**\n * Platform for dynamic tests\n *\n * @publicApi\n */\nexport const platformCoreDynamicTesting: (extraProviders?: any[]) => PlatformRef =\n    createPlatformFactory(\n        platformCoreDynamic,\n        'coreDynamicTesting',\n        [],\n    );\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {createPlatformFactory, NgModule, PlatformRef, StaticProvider} from '@angular/core';\nimport {TestComponentRenderer} from '@angular/core/testing';\nimport {ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS as INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS} from '@angular/platform-browser-dynamic';\nimport {BrowserTestingModule} from '@angular/platform-browser/testing';\n\nimport {DOMTestComponentRenderer} from './dom_test_component_renderer';\nimport {platformCoreDynamicTesting} from './platform_core_dynamic_testing';\n\nexport * from './private_export_testing';\n\n/**\n * @publicApi\n */\nexport const platformBrowserDynamicTesting = createPlatformFactory(\n    platformCoreDynamicTesting, 'browserDynamicTesting',\n    INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n\n/**\n * NgModule for testing.\n *\n * @publicApi\n */\n@NgModule({\n  exports: [BrowserTestingModule],\n  providers: [\n    {provide: TestComponentRenderer, useClass: DOMTestComponentRenderer},\n  ]\n})\nexport class BrowserDynamicTestingModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"mappings":"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","names":["INTERNAL_BROWSER_PLATFORM_PROVIDERS","PLATFORM_BROWSER_ID","BrowserDomAdapter","getDOM","platformCoreDynamic","INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS"],"x_google_ignoreList":[0]}